substitutions:
  name: "Visual_EspVoice"
  friendly_name: "Visual EspVoice"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ap_ssid: "Visual EspVoice fallback"  
  wifi_ap_password: "password"
  api_encription_key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"# copy api key from your configuration
  ota_password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"# copy ota passwowrd from your configuration
  awake_video: "media-source://media_source/assist_responses/awake.mp4"#path to video file to respont on wake word detected
  speech_video: "media-source://media_source/assist_responses/no_sound_speech.mp4"#patth to video file to see when tts responses is stremed 
  external_media_player_audio: "media_player.ha_display_fully_kiosk"# android tablet media player from fully kiosk browser
  external_media_player_video: "media_player.ha_display_browser_mod"# android tablet media player from browser mod
  display_switch: "switch.ha_display_ecran_fully_kiosk"# android tablet display switch from fully kiosk browser

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
     - priority: -100
       then:
         - light.turn_on:
             id: led
             effect: "Slow Pulse"
             red: 100%
             green: 60%
             blue: 0%
         - wait_until:
             condition:
               wifi.connected:
         - light.turn_on:
             id: led
             effect: "Fast Pulse"
             red: 0%
             green: 100%
             blue: 0%
         - wait_until:
             condition:
               api.connected:
         - light.turn_on:
             id: led
             effect: none
             red: 0%
             green: 100%
             blue: 0%
         - delay: 1s
         - script.execute: reset_led
         - wait_until: api.connected
         - delay: 1s
         - if:
             condition:
               switch.is_on: use_wake_word
             then:
               - voice_assistant.start_continuous:

esp32:
  board: esp32dev
  framework:
    type: esp-idf


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ${api_encription_key}
  services:
    - service: start_va
      then:
        - voice_assistant.start
    - service: stop_va
      then:
        - voice_assistant.stop

ota:
  password: ${ota_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${wifi_ap_ssid}
    password: ${wifi_ap_password}
captive_portal:

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s


i2s_audio:
  i2s_lrclk_pin: GPIO15 # WS pin
  i2s_bclk_pin: GPIO4 # CK pin


microphone:
  - platform: i2s_audio
    id: board_microphone
    adc_type: external
    i2s_din_pin: GPIO16
    pdm: false
    channel: left #if L/R pin is connected to 3.3v or command digital pin
#    channel: right #if L/R pin is connected ground
# Phisical speaker is not needed but must to be in cod for ”on_tts_stream_end:”
# If is not possible to disconnect speaker, change gpio pin to ”i2s_dout_pin:” with unused one
speaker:
  - platform: i2s_audio
    id: board_speaker
    dac_type: external
    i2s_dout_pin: GPIO26
    mode: mono

output:
    ######################################################
    # One buzzer leg connected to GPIO14, the other to GND
    ######################################################
  - platform: ledc
    pin: GPIO14
    id: buzzer


esp_adf:

voice_assistant:
  id: va
  microphone: board_microphone
  speaker: board_speaker
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0

  on_wake_word_detected:

    ######################################################
  # Optional connect an internall buzzer to ground and gpio14
    ######################################################
#    - output.turn_on: buzzer
#    - output.ledc.set_frequency:  
#         id: buzzer
#         frequency: "800Hz"
#    - output.set_level:
#         id: buzzer
#         level: "90%"
#    - delay: 100ms
#    - output.turn_off: buzzer

    - switch.turn_on: mute_pin 
    #- switch.turn_off: use_wake_word" #If you don't have the possibility to modify the microphone wiring for mute switch
    - delay: 100ms
    - homeassistant.service:  
        service: homeassistant.turn_on
        data: 
          entity_id: ${display_switch}      
    - delay: 100ms
    - homeassistant.service:        
        service: media_player.play_media
        data:
          entity_id: ${external_media_player_video}
          media_content_id: ${awake_video}
          media_content_type: video/mp4
    - delay: 3s      
    - switch.turn_off: mute_pin
    #- voice_assistant.start#If you don't have the possibility to modify the microphone wiring for mute switch

  on_listening:
    - delay: 100ms
    - light.turn_on:
        id: led
        blue: 60%
        red: 0%
        green: 0%
        effect: "Slow Pulse"

  on_stt_vad_end:
    - delay: 100ms
    - light.turn_on:
        id: led
        blue: 60%
        red: 0%
        green: 0%
        effect: "Fast Pulse"

  on_tts_end: 
    - delay: 200ms
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 60%
        effect: none
    - delay: 200ms
    - homeassistant.service:        
        service: media_player.turn_off
        data:
          entity_id: ${external_media_player_video}
    - delay: 200ms
    - homeassistant.service:        
        service: media_player.play_media
        data:
          entity_id: ${external_media_player_video}
          media_content_id: ${speech_video} #this is no sound speach video to play when tts is streamed
          media_content_type: video/mp4    
    - delay: 600ms
    - homeassistant.service:        
        service: media_player.play_media
        data:
          entity_id: ${external_media_player_audio}
          media_content_id: !lambda return x; # this is tts response
          media_content_type: audio/mpeg 

  on_tts_stream_end:
    - delay: 800ms
    - homeassistant.service:        
        service: media_player.turn_off
        data:
          entity_id: ${external_media_player_video}
    - delay: 100ms
    - script.execute: reset_led 
      
  on_end:
    - delay: 100ms
    - script.execute: reset_led
    - delay: 100ms
    - homeassistant.service:        
        service: media_player.turn_off
        data:
          entity_id: ${external_media_player_video}
#    - delay: 2s
#    - switch.turn_on: use_wake_word # this is if not have mute switch
  on_error:
    - light.turn_on:
        id: led
        blue: 0%
        red: 100%
        green: 0%
        brightness: 60%
        effect: none
    - delay: 1s
    - script.execute: reset_led

  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led

  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
          - light.turn_off: led

esp32_touch:
  setup_mode: false

binary_sensor:
  - platform: esp32_touch # this is a spiral cooper conductor with 1,5mm x 10cm on the front case of satellite
    pin: GPIO27
    name: Action
    threshold: 1480
    disabled_by_default: true
    on_click:
      - min_length: 20ms # if is touched for up to one second and the wake word is off, it starts listening
        max_length: 900ms
        then:
        - if:
            condition:
              switch.is_off: use_wake_word
            then:
              - if:
                  condition: voice_assistant.is_running
                  then:
                    - voice_assistant.stop:
                    - script.execute: reset_led
                  else:
                    - voice_assistant.start:
            else:
              - voice_assistant.stop
              - delay: 1s
              - script.execute: reset_led
              - script.wait: reset_led
              - voice_assistant.start_continuous:

      - min_length: 1000ms #if touched for more than one second turns wake word detection on or off
        max_length: 9000ms
        then:
          - switch.toggle: use_wake_word

light:
  - platform: esp32_rmt_led_strip
    rmt_channel: 0
    name: None
    id: led
    disabled_by_default: true
    pin: GPIO13
    chipset: WS2812 # modify with your led chipset
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 30%
          max_brightness: 60%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 30%
          max_brightness: 60%

script:
  - id: reset_led
    then:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
              - switch.is_off: mute_pin              
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 30%
                effect: none
          else:
            - light.turn_off: led

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
            - switch.turn_off: mute_pin
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led

  - platform: gpio # is connected between microphone L/R pin and pin 17
    name: MUTE
    id: mute_pin
    restore_mode: RESTORE_DEFAULT_OFF
    pin: 
      number: GPIO17
      inverted: true







